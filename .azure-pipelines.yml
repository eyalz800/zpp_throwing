trigger:
- main

strategy:
  matrix:
    ubuntu-22.04-clang:
      VM_IMAGE: 'ubuntu-22.04'
      OPERATING_SYSTEM: 'linux'
      COMPILER: 'clang'
      CLANG_VERSION: '13'
      ASAN_OPTIONS: 'alloc_dealloc_mismatch=0'
      TEST_AUTODETECT: 1
    macOS-15:
      VM_IMAGE: 'macOS-15'
      OPERATING_SYSTEM: 'mac-os'
      COMPILER: 'clang'
      CLANG_VERSION: '17'
      ASAN_OPTIONS: 'alloc_dealloc_mismatch=0'
      TEST_AUTODETECT: 1

pool:
  vmImage: $(VM_IMAGE)

steps:
- script: |
    curl -fLo llvm.sh https://apt.llvm.org/llvm.sh
    chmod +x ./llvm.sh
    sudo ./llvm.sh $(CLANG_VERSION) all
    sudo apt install -y libc++-$(CLANG_VERSION)-dev libc++abi-$(CLANG_VERSION)-dev libunwind-$(CLANG_VERSION)-dev
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$(CLANG_VERSION) $(CLANG_VERSION)00
  displayName: 'install (linux)'
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')

- script: |
    brew install llvm@$(CLANG_VERSION) make
  displayName: 'install (mac)'
  condition: eq(variables['OPERATING_SYSTEM'], 'mac-os')

- script: |
    make -C test -f zpp.mk -j
  displayName: 'compile-debug (linux)'
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')

- script: |
    make -C test -f zpp.mk -j mode=release
  displayName: 'compile-release (linux)'
  condition: eq(variables['OPERATING_SYSTEM'], 'linux')

- script: |
    export PATH=/usr/local/opt/llvm@$(CLANG_VERSION)/bin:/usr/local/opt/llvm/bin:$PATH
    gmake -C test -f zpp.mk -j
  displayName: 'compile-debug (mac)'
  condition: eq(variables['OPERATING_SYSTEM'], 'mac-os')

- script: |
    export PATH=/usr/local/opt/llvm@$(CLANG_VERSION)/bin:/usr/local/opt/llvm/bin:$PATH
    gmake -C test -f zpp.mk -j mode=release
  displayName: 'compile-release (mac)'
  condition: eq(variables['OPERATING_SYSTEM'], 'mac-os')

- script: |
    ./test/out/debug/default/output
  displayName: 'test-debug'

- script: |
    ./test/out/release/default/output
  displayName: 'test-release'
